geom_point(data = plot_points, color = "black", aes(shape = plot_points$correction))
#Apply statistical test to each time point for each kid
divergence_p_table_by_subject <- divergence_point_stat %>%
# select only rows in the dataframe where a fixation occurred
filter(value == 1) %>%
# label fixations that were on the target as 1 and as 0 otherwise,
mutate(looking_to_target = ifelse(aoi == "target", 1, 0)) %>%
# we want to test for each timepoint for each subject
group_by(parallel_timestamp, recording_name) %>%
# apply logistic regression and extract z-values
summarise(z = summary(glm(looking_to_target ~ 1, family="binomial"))$coefficients[1,3]) %>%
# add p-values
mutate(p = pnorm(-abs(z))*2)
# Find the earliest timepoint with a significant uncorrected p-value
(uncorr_by_subject <- divergence_p_table_by_subject %>%
group_by(recording_name) %>%
# extract positive z-scores ("target advantage") and significant p-values
filter(z > 0, p < alpha) %>%
# extract the earliest significant p-value and its timepoint
slice(1))
# Find the earliest timepoint that survives the Bonferroni correction ----------- Looks like when you split by subject, there isn't enough data for the corrected p values to be significant, so statistically, individual children don't have a divergence point after correcting
(bnf_by_subject <- divergence_p_table_by_subject %>%
group_by(recording_name) %>%
filter(z > 0, p < alpha_corrected) %>%
slice(1))
# Find the earliest timepoint after FDR control
(fdr_by_subject <- divergence_p_table_by_subject %>%
group_by(recording_name) %>%
# apply FDR control from `stats` package
mutate(p_fdr = stats::p.adjust(p, method = "BY", n = length(p))) %>%
filter(z > 0, p_fdr < alpha) %>%
slice(1))
#10. Pupil dilation
#Baseline pupil size in the 200ms before noun onset and then subtracted the baseline from the pupil size measurements on each trial.
#In Liz's paper they contrasted time slice by time slice across two conditions, but here we don't have switched and same language conditions. I'll do average size at baseline and avg size after noun onset for now. But then talk with team about it.
pupil_dilation <- analysis_dataset %>%
ungroup() %>%
filter(noun_onset>= -200 & noun_onset <= 500)%>%
mutate(pupil_period = case_when(noun_onset >= -200 & noun_onset <= 0 ~ "baseline",
TRUE ~ "post_onset"))%>%
dplyr::select(recording_timestamp, subject_id, recording_name, trial_number, media_name, pupil_period, pupil_right, pupil_left) %>%
mutate(two_pupil_mean = case_when(is.na(pupil_left) & is.na(pupil_right) ~ NA,
is.na(pupil_left)  ~ pupil_right,
is.na(pupil_right) ~ pupil_left,
TRUE ~ (pupil_left + pupil_right)/2)) %>%
filter(!is.na(two_pupil_mean))
#The next steps are confusing to me.Should we average baseline pupil? Should we contrast each post onset time slice to a partricular baseline time slice? We could use mean dilation, peak dilation (or peak amplitude), and/or peak latency (i.e., the time between onset and peak pupil dilation). The problem with mean dilation is that the baseline has less sampling than the post-onset. Could we do peak dilation of baseline vs. peak dilation post onset? Or peak dilation but from which baseline point? from peak? We will for sure do GCA's as extra analyses
#Peak dilation
peak_dilation_by_trial <- pupil_dilation %>%
ungroup()%>%
group_by(trial_number, recording_name, pupil_period) %>%
summarise(peak_pupil = max(two_pupil_mean)) %>%
pivot_wider(names_from = pupil_period, values_from ="peak_pupil")%>%
mutate(peak_pupil_size_difference = post_onset - baseline) %>% #difference in peak pupil points
filter(!is.na(peak_pupil_size_difference)) %>%
rename(max_pupil_baseline = baseline,
max_pupil_post_onset = post_onset) %>%
ungroup()
peak_dilation_by_subject <- peak_dilation_by_trial %>%
group_by(recording_name) %>%
summarise(peak_pupil_size_difference = mean(peak_pupil_size_difference)) %>%
ungroup()
#Mean dilation
mean_dilation_by_trial <- pupil_dilation %>%
ungroup()%>%
group_by(trial_number, recording_name, pupil_period) %>%
summarise(mean_pupil = mean(two_pupil_mean, na.rm = T)) %>%
pivot_wider(names_from = pupil_period, values_from ="mean_pupil")%>%
mutate(mean_pupil_size_difference = post_onset - baseline) %>% #difference in peak pupil points
filter(!is.na(mean_pupil_size_difference)) %>%
rename(mean_pupil_baseline = baseline,
mean_pupil_post_onset = post_onset) %>%
ungroup()
mean_dilation_by_subject <- mean_dilation_by_trial %>%
group_by(recording_name) %>%
summarise(mean_pupil_size_difference = mean(mean_pupil_size_difference)) %>%
ungroup()
#peak latency
peak_pupil_latency_by_trial <- pupil_dilation %>%
ungroup()%>%
group_by(trial_number, recording_name, pupil_period) %>%
slice(which.max(two_pupil_mean)) %>%
dplyr::select(recording_name, pupil_period, peak_time_stamp = recording_timestamp) %>%
group_by(trial_number, recording_name) %>%
summarise(peak_pupil_latency = diff(peak_time_stamp)) %>%
ungroup()
peak_pupil_latency_by_subject <- peak_pupil_latency_by_trial %>%
group_by(recording_name) %>%
summarise(peak_pupil_latency = mean(peak_pupil_latency))
#11. Duration of first look
### Duration of the first look recorded toward a particular AOI. - To target specifically, with at least 200 ms fixation length
first_look_duration_by_trial <- analysis_dataset %>%
ungroup() %>%
filter(noun_onset >= 360 & noun_onset <= 3000) %>%
group_by(recording_name, trial_number) %>%
mutate(looking_stretch_id = data.table::rleid(target)) %>%
group_by(recording_name, trial_number, looking_stretch_id) %>%
mutate(row = row_number()) %>%
mutate(where_looking = case_when(target == TRUE ~ "target",
distractor == TRUE ~ "distractor",
TRUE ~ "neither")) %>%
filter(where_looking == "target") %>%
mutate(first_look_dur = max(row_number())*(1000/60)) %>%
filter(first_look_dur >= 200) %>%
group_by(trial_number, recording_name) %>%
filter(looking_stretch_id == min(looking_stretch_id)) %>%
ungroup() %>%
distinct(recording_name, trial_number, media_name, first_look_dur) %>%
ungroup()
first_look_duration_by_subject <- first_look_duration_by_trial %>%
group_by(recording_name) %>%
summarise(first_look_dur = mean(first_look_dur, na.rm = T)) %>%
ungroup()
#------------------------------------------------Calculate same variables, split by initial look location
#Split dataset by initial look location
analysis_dataset_split <- analysis_dataset %>%
group_by(initial_look) %>%
nest()
#1. Proportion looking to target
prop_looking_by_subject_split <- analysis_dataset %>%
filter(noun_onset>= 360 & noun_onset <= 3000) %>%
group_by(recording_name, age_months, exp_to_target_lang, initial_look) %>%
summarise(samples_target=sum(target, na.rm = T),
samples_distractor=sum(distractor, na.rm = T))%>%
mutate(prop_looking = samples_target/(samples_target + samples_distractor)) %>%
ungroup()
#2. Proportion looking difference
#Within a pair of pictures A and B, the fixation to picture A relative to B when A was the target, minus the fixation #to A when A was the distractor.
prop_looking_diff_by_item_split <- analysis_dataset %>%
ungroup()%>%
filter(noun_onset>= 360 & noun_onset <= 3000)%>%
dplyr::select(recording_name, recording_timestamp, target_word, distractor_word, target, distractor, initial_look)%>%
pivot_longer(c(target_word, distractor_word), names_to = "word_type", values_to = "word") %>%
mutate(looking = case_when(word_type == "target_word" & target == TRUE ~ TRUE,
word_type == "distractor_word" & distractor == TRUE ~ TRUE,
TRUE ~ FALSE)) %>%
group_by(recording_name, word_type, word, initial_look) %>%
#what percent of the time when x is target are kids looking at x, what percent of the time when x is distractor are kids looking at x
summarise(prop_looking = sum(looking == T, na.rm = T)/n()) %>%
pivot_wider(names_from = "word_type", values_from = "prop_looking") %>%
filter(!is.na(target_word) & !is.na(distractor_word)) %>%
mutate(prop_looking_diff = target_word - distractor_word) %>%
dplyr::select(recording_name, target_word = word, prop_looking_diff, initial_look) %>%
ungroup()
prop_looking_diff_by_subject_split <- prop_looking_diff_by_item_split %>%
group_by(recording_name, initial_look) %>% #Calculating this variable by subject instead of by trial for the correlation matrix.
summarise(prop_looking_diff = mean(prop_looking_diff)) %>%
ungroup() #only 165 kids have data for this variable, because they didn't have enough data/trials included with both words of each yoked pair
#3. Fixations
#For this one, stretches of same looks are counted as one fixation
fixations_total_by_trial_split <- analysis_dataset %>%
ungroup() %>%
filter(noun_onset >= 360 & noun_onset <= 3000) %>%
group_by(recording_name, trial_number) %>%
mutate(trackloss_group_id = data.table::rleid(trackloss)) %>%
group_by(trackloss_group_id, recording_name, trial_number) %>%
mutate(num_consec_trackloss_rows = n()) %>%
ungroup() %>%
filter(trackloss == FALSE | (trackloss == TRUE & num_consec_trackloss_rows >= 2)) %>%
group_by(recording_name, trial_number) %>%
mutate(looking_stretch_id = data.table::rleid(target)) %>%
group_by(recording_name, trial_number, looking_stretch_id) %>%
#filter to fixations of at least 12 rows or ~ 200 ms
filter(n() >= 12) %>%
#filter to target fixations
filter(target == TRUE) %>%
distinct(recording_name, trial_number, looking_stretch_id, initial_look) %>%
group_by(recording_name, trial_number, initial_look) %>%
summarise(number_fixations = n()) %>%
ungroup()
fixations_total_by_subject_split <- fixations_total_by_trial_split %>%
group_by(recording_name, initial_look) %>%
summarise(number_fixations = sum(number_fixations)) %>%
ungroup()
#6. Total number of switches between AOIs
number_of_switches_by_trial_split <- analysis_dataset %>%
ungroup() %>%
filter(noun_onset >= 360 & noun_onset <= 3000) %>%
#for this one, get rid of track loss rows
filter(trackloss == FALSE) %>%
group_by(recording_name, trial_number) %>%
mutate(looking_stretch_id = data.table::rleid(target)) %>%
group_by(recording_name, trial_number, looking_stretch_id) %>%
#keep stretches that are at least 200 ms or 12 rows
filter(n() >= 12) %>%
mutate(where_looking = case_when(target == TRUE ~ "target",
distractor == TRUE ~ "distractor",
TRUE ~ "neither")) %>%
filter(where_looking != "neither") %>%
distinct(recording_name, trial_number, looking_stretch_id, where_looking, media_name, subject_id, initial_look) %>%
group_by(recording_name, trial_number) %>%
mutate(AOI_switches = case_when(lag(where_looking) == "target" & where_looking == "distractor" ~ 1,
lag(where_looking) == "distractor" & where_looking == "target" ~ 1)) %>%
group_by(recording_name, trial_number, initial_look) %>%
summarise(total_aoi_switches = sum(AOI_switches, na.rm = T)) %>%
ungroup()
number_of_switches_by_subject_split <- number_of_switches_by_trial_split %>%
group_by(recording_name, initial_look) %>%
summarise(total_aoi_switches = sum(total_aoi_switches, na.rm = T)) %>%
ungroup()
#8. Mean fixation duration during trial
#Mean duration of fixations during the window of analysis within a trial. Mean by subject by trial?
mean_fixation_dur_by_trial_split <- analysis_dataset %>%
filter(noun_onset>= 360 & noun_onset <= 3000)%>%
group_by(recording_name, trial_number) %>%
mutate(trackloss_group_id = data.table::rleid(trackloss)) %>%
group_by(trackloss_group_id, recording_name, trial_number) %>%
mutate(num_consec_trackloss_rows = n()) %>%
ungroup() %>%
filter(trackloss == FALSE | (trackloss == TRUE & num_consec_trackloss_rows >= 2)) %>%
group_by(recording_name, trial_number) %>%
mutate(looking_stretch_id = data.table::rleid(target)) %>%
group_by(recording_name, trial_number, looking_stretch_id) %>%
#filter to fixations of at least 12 rows or ~ 200 ms
filter(n() >= 12) %>%
filter(target == TRUE) %>%
group_by(recording_name, trial_number, media_name, looking_stretch_id, initial_look) %>%
summarise(length_of_looks = n()) %>%
mutate(duration_of_look = length_of_looks*(1000/60)) %>%
group_by(recording_name, trial_number, initial_look) %>%
summarise(duration_of_look = mean(duration_of_look, na.rm = T)) %>%
ungroup()
mean_fixation_dur_by_subject_split <- mean_fixation_dur_by_trial_split %>%
group_by(recording_name, initial_look) %>%
summarise(duration_of_look = mean(duration_of_look, na.rm = T)) %>%
ungroup()
#10. Pupil dilation
#Baseline pupil size in the 200ms before noun onset and then subtracted the baseline from the pupil size measurements on each trial.
#In Liz's paper they contrasted time slice by time slice across two conditions, but here we don't have switched and same language conditions. I'll do average size at baseline and avg size after noun onset for now. But then talk with team about it.
pupil_dilation_split <- analysis_dataset %>%
ungroup() %>%
filter(noun_onset>= -200 & noun_onset <= 500)%>%
mutate(pupil_period = case_when(noun_onset >= -200 & noun_onset <= 0 ~ "baseline",
TRUE ~ "post_onset"))%>%
dplyr::select(recording_timestamp, subject_id, recording_name, trial_number, media_name, pupil_period, pupil_right, pupil_left, initial_look) %>%
mutate(two_pupil_mean = case_when(is.na(pupil_left) & is.na(pupil_right) ~ NA,
is.na(pupil_left)  ~ pupil_right,
is.na(pupil_right) ~ pupil_left,
TRUE ~ (pupil_left + pupil_right)/2)) %>%
filter(!is.na(two_pupil_mean))
#The next steps are confusing to me.Should we average baseline pupil? Should we contrast each post onset time slice to a partricular baseline time slice? We could use mean dilation, peak dilation (or peak amplitude), and/or peak latency (i.e., the time between onset and peak pupil dilation). The problem with mean dilation is that the baseline has less sampling than the post-onset. Could we do peak dilation of baseline vs. peak dilation post onset? Or peak dilation but from which baseline point? from peak? We will for sure do GCA's as extra analyses
#Peak dilation
peak_dilation_by_trial_split <- pupil_dilation_split %>%
ungroup()%>%
group_by(trial_number, recording_name, pupil_period, initial_look) %>%
summarise(peak_pupil = max(two_pupil_mean)) %>%
pivot_wider(names_from = pupil_period, values_from ="peak_pupil")%>%
mutate(peak_pupil_size_difference = post_onset - baseline) %>% #difference in peak pupil points
filter(!is.na(peak_pupil_size_difference)) %>%
rename(max_pupil_baseline = baseline,
max_pupil_post_onset = post_onset) %>%
ungroup()
peak_dilation_by_subject_split <- peak_dilation_by_trial_split %>%
group_by(recording_name, initial_look) %>%
summarise(peak_pupil_size_difference = mean(peak_pupil_size_difference)) %>%
ungroup()
#Mean dilation
mean_dilation_by_trial_split <- pupil_dilation_split %>%
ungroup()%>%
group_by(trial_number, recording_name, pupil_period, initial_look) %>%
summarise(mean_pupil = mean(two_pupil_mean, na.rm = T)) %>%
pivot_wider(names_from = pupil_period, values_from ="mean_pupil")%>%
mutate(mean_pupil_size_difference = post_onset - baseline) %>% #difference in peak pupil points
filter(!is.na(mean_pupil_size_difference)) %>%
rename(mean_pupil_baseline = baseline,
mean_pupil_post_onset = post_onset) %>%
ungroup()
mean_dilation_by_subject_split <- mean_dilation_by_trial_split %>%
group_by(recording_name, initial_look) %>%
summarise(mean_pupil_size_difference = mean(mean_pupil_size_difference)) %>%
ungroup()
#peak latency
peak_pupil_latency_by_trial_split <- pupil_dilation_split %>%
ungroup()%>%
group_by(trial_number, recording_name, pupil_period) %>%
slice(which.max(two_pupil_mean)) %>%
dplyr::select(recording_name, pupil_period, peak_time_stamp = recording_timestamp, initial_look) %>%
group_by(trial_number, recording_name, initial_look) %>%
summarise(peak_pupil_latency = diff(peak_time_stamp)) %>%
ungroup()
peak_pupil_latency_by_subject_split <- peak_pupil_latency_by_trial_split %>%
group_by(recording_name, initial_look) %>%
summarise(peak_pupil_latency = mean(peak_pupil_latency))
#11. Duration of first look
### Duration of the first look recorded toward a particular AOI. - To target specifically, with at least 200 ms fixation length
first_look_duration_by_trial_split <- analysis_dataset %>%
ungroup() %>%
filter(noun_onset >= 360 & noun_onset <= 3000) %>%
group_by(recording_name, trial_number) %>%
mutate(looking_stretch_id = data.table::rleid(target)) %>%
group_by(recording_name, trial_number, looking_stretch_id) %>%
mutate(row = row_number()) %>%
mutate(where_looking = case_when(target == TRUE ~ "target",
distractor == TRUE ~ "distractor",
TRUE ~ "neither")) %>%
filter(where_looking == "target") %>%
mutate(first_look_dur = max(row_number())*(1000/60)) %>%
filter(first_look_dur >= 200) %>%
group_by(trial_number, recording_name) %>%
filter(looking_stretch_id == min(looking_stretch_id)) %>%
ungroup() %>%
distinct(recording_name, trial_number, media_name, first_look_dur, initial_look) %>%
ungroup()
first_look_duration_by_subject_split <- first_look_duration_by_trial_split %>%
group_by(recording_name, initial_look) %>%
summarise(first_look_dur = mean(first_look_dur, na.rm = T)) %>%
ungroup()
data_new_dvs_by_trial <- analysis_dataset %>%
distinct(recording_name, trial_number, yoked_pair, target_word, age_months, exp_to_target_lang) %>%
left_join(prop_looking_by_trial) %>%
#double check if kids see the same word more than once... if so, this item will be ducplicated in the dataset
left_join(prop_looking_diff_by_item) %>%
# commenting out for now until we verify how to do this one left_join(sampling_fixations_total %>% dplyr::select(-subject_id)) %>%
left_join(fixations_total_by_trial) %>%
left_join(prop_shifts_distractor_initial_by_trial) %>%
left_join(prop_shifts_target_initial_by_subject) %>%
left_join(RT_by_trial) %>%
left_join(number_of_switches_by_trial) %>%
left_join(mean_fixation_dur_by_trial) %>%
left_join(peak_dilation_by_trial) %>%
left_join(mean_dilation_by_trial) %>%
left_join(peak_pupil_latency_by_trial) %>%
left_join(first_look_duration_by_trial) %>%
ungroup() %>%
mutate(exp_to_target_lang_centred = (exp_to_target_lang/100)-.5,
age_months_centred = age_months - 25,
correct_shift = case_when(correct_shift == T ~ 1,
correct_shift == F ~ 0))
data_new_dvs_by_subject <- analysis_dataset %>%
distinct(recording_name, age_months, exp_to_target_lang) %>%
left_join(prop_looking_by_subject) %>%
#double check if kids see the same word more than once... if so, this item will be ducplicated in the dataset
left_join(prop_looking_diff_by_subject) %>%
# commenting out for now until we verify how to do this one left_join(sampling_fixations_total %>% dplyr::select(-subject_id)) %>%
left_join(fixations_total_by_subject) %>%
left_join(prop_shifts_distractor_initial_by_subject) %>%
left_join(prop_shifts_target_initial_by_subject) %>%
left_join(RT_by_subject) %>%
left_join(number_of_switches_by_subject) %>%
left_join(mean_fixation_dur_by_subject) %>%
left_join(peak_dilation_by_subject) %>%
left_join(mean_dilation_by_subject) %>%
left_join(peak_pupil_latency_by_subject) %>%
left_join(first_look_duration_by_subject) %>%
ungroup()%>%
mutate(exp_to_target_lang_centred = (exp_to_target_lang/100)-.5,
age_months_centred = age_months - 25)
#PEARSON CORRELATION
for_correlation_with_age_lang_centred<- data_new_dvs_by_subject %>%
dplyr::select(where(is.numeric))
for_correlation_no_age_lang_centred<- data_new_dvs_by_subject %>%
dplyr::select(where(is.numeric)) %>%
dplyr::select(-contains("centred"))
#Change column and row names to look nicer on plot in real words
colnames(kbh_correlation) <- c("Age in months", "Exposure to target language", "Proportion looking", "Proportion looking difference", "Total number of fixations", "Proportion of trials shifting to target", "Proportion of trials staying on target", "Mean reaction time", "Total number of AOI switches", "Mean duration of looks", "Peak pupil size difference", "Mean pupil size difference", "Time to peak pupil", "Mean duration of first look")
kbh_correlation <- cor(x=for_correlation_no_age_lang_centred, use="pairwise.complete.obs")
#Change column and row names to look nicer on plot in real words
colnames(kbh_correlation) <- c("Age in months", "Exposure to target language", "Proportion looking", "Proportion looking difference", "Total number of fixations", "Proportion of trials shifting to target", "Proportion of trials staying on target", "Mean reaction time", "Total number of AOI switches", "Mean duration of looks", "Peak pupil size difference", "Mean pupil size difference", "Time to peak pupil", "Mean duration of first look")
rownames(kbh_correlation) <- c("Age in months", "Exposure to target language", "Proportion looking", "Proportion looking difference", "Total number of fixations", "Proportion of trials shifting to target", "Proportion of trials staying on target", "Mean reaction time", "Total number of AOI switches", "Mean duration of looks", "Peak pupil size difference", "Mean pupil size difference", "Time to peak pupil", "Mean duration of first look")
#Plot:
corrplot(kbh_correlation, type = 'lower', tl.col = 'black',
cl.ratio = 0.2, tl.srt = 45, col = COL2('PiYG', 10))
?recordPlot
#Prop Looking Models
prop_looking_simple <- lm(prop_looking ~ age_months_centred + exp_to_target_lang_centred,
data = data_new_dvs_by_subject)
summary(prop_looking_simple)
#Number fixations Models
number_fixations_simple <- lm (number_fixations ~ age_months_centred + exp_to_target_lang_centred,
data = data_new_dvs_by_subject)
summary(number_fixations_simple)
#Latency to switch Models
latency_to_switch_simple <- lm (mean_RT ~ age_months_centred + exp_to_target_lang_centred,
data = data_new_dvs_by_subject)
summary(latency_to_switch_simple)
#Number of AOI switches Models
aoi_switches_simple <- lm (total_aoi_switches ~ age_months_centred + exp_to_target_lang_centred,
data = data_new_dvs_by_subject)
summary(aoi_switches_simple)
#Mean fixation duration Models
mean_fixation_dur_simple <- lm (duration_of_look ~ age_months_centred + exp_to_target_lang_centred,
data = data_new_dvs_by_subject)
summary(mean_fixation_dur_simple)
#Peak pupil size Models
peak_pupil_simple <- lm (peak_pupil_size_difference ~ age_months_centred + exp_to_target_lang_centred,
data = data_new_dvs_by_subject)
summary(peak_pupil_simple)
#Mean pupil size Models
mean_pupil_simple <- lm (mean_pupil_size_difference ~ age_months_centred + exp_to_target_lang_centred,
data = data_new_dvs_by_subject)
summary(mean_pupil_simple)
#Peak pupil latency Models
peak_pupil_latency_simple <- lm (peak_pupil_latency ~ age_months_centred + exp_to_target_lang_centred,
data = data_new_dvs_by_subject)
summary(peak_pupil_latency_simple)
#First look duration Models
first_look_duration_simple <- lm (first_look_dur ~ age_months_centred + exp_to_target_lang_centred,
data = data_new_dvs_by_subject)
summary(first_look_duration_simple)
correct_shift_simple <- lm(prop_shift_distractor_initial ~ age_months_centred + exp_to_target_lang_centred,
data = data_new_dvs_by_subject)
summary(correct_shift_simple)
#Prop Looking Diff Models
prop_looking_diff_simple <- lm (prop_looking_diff ~ age_months_centred + exp_to_target_lang_centred,
data = data_new_dvs_by_subject)
summary(prop_looking_diff_simple)
summary(prop_looking_simple)
target_stay_simple <-lm(prop_shift_target_initial ~ age_months_centred + exp_to_target_lang_centred,
data = data_new_dvs_by_subject)
compare_performance(correct_shift_simple, peak_pupil_latency_simple, mean_pupil_simple, peak_pupil_simple,
mean_fixation_dur_simple , aoi_switches_simple, latency_to_switch_simple, prop_looking_diff_simple, number_fixations_simple, prop_looking_simple, target_stay_simple, correct_shift_simple)
model_data_nested <- data_new_dvs_by_subject_split %>%
group_by(initial_look) %>%
nest()
#this one is for by subject variables only, since by trial would not be different because each trial only has one initial look location value
data_new_dvs_by_subject_split <- analysis_dataset %>%
distinct(recording_name, age_months, exp_to_target_lang, initial_look) %>%
left_join(prop_looking_by_subject_split) %>%
#double check if kids see the same word more than once... if so, this item will be ducplicated in the dataset
left_join(prop_looking_diff_by_subject_split) %>%
# commenting out for now until we verify how to do this one left_join(sampling_fixations_total %>% dplyr::select(-subject_id)) %>%
left_join(fixations_total_by_subject_split) %>%
left_join(number_of_switches_by_subject_split) %>%
left_join(mean_fixation_dur_by_subject_split) %>%
left_join(peak_dilation_by_subject_split) %>%
left_join(mean_dilation_by_subject_split) %>%
left_join(peak_pupil_latency_by_subject_split) %>%
left_join(first_look_duration_by_subject_split) %>%
ungroup()%>%
mutate(exp_to_target_lang_centred = (exp_to_target_lang/100)-.5,
age_months_centred = age_months - 25)
#Models in nested dataframe
model_data_nested <- data_new_dvs_by_subject_split %>%
group_by(initial_look) %>%
nest()
models_nested <- model_data_nested %>%
mutate(
#Prop looking
prop_looking_simple_split = map(data, ~lm(prop_looking ~ age_months_centred + exp_to_target_lang_centred,
data = .x)),
#Prop looking diff
prop_looking_diff_simple_split = map(data, ~lm (prop_looking_diff ~ age_months_centred + exp_to_target_lang_centred,
data = .x)),
#Number fixations
number_fixations_simple_split = map(data, ~lm (number_fixations ~ age_months_centred + exp_to_target_lang_centred,
data = .x)),
#Latency to switch
# latency_to_switch_simple_split = map(data, ~ lm(mean_RT ~ age_months_centred + exp_to_target_lang_centred,
#                         data = .x)),
#Number AOI switches
aoi_switches_simple_split = map(data, ~ lm(total_aoi_switches ~ age_months_centred + exp_to_target_lang_centred,
data = .x)),
#Mean fixation duration
mean_fixation_dur_simple_split = map(data, ~lm(duration_of_look ~ age_months_centred + exp_to_target_lang_centred,
data = .x)),
#Peak pupil size
peak_pupil_simple_split = map(data, ~lm(peak_pupil_size_difference ~ age_months_centred + exp_to_target_lang_centred,
data = .x)),
#Mean pupil size
mean_pupil_simple_split = map(data, ~lm(mean_pupil_size_difference ~ age_months_centred + exp_to_target_lang_centred,
data = .x)),
#Peak pupil latency
peak_pupil_latency_simple_split = map(data, ~lm(peak_pupil_latency ~ age_months_centred + exp_to_target_lang_centred,
data = .x)),
#First look duration
first_look_duration_simple_split = map(data, ~lm(first_look_dur ~ age_months_centred + exp_to_target_lang_centred,
data = .x)),
#Correct shift for distractor initial
# correct_shift_simple_split = map(data, ~lm(prop_shift_distractor_initial ~ age_months_centred + exp_to_target_lang_centred,
#                         data = .x)),
# #Staying on target for target initial
# target_stay_simple_split = map(data, ~lm(prop_shift_target_initial ~ age_months_centred + exp_to_target_lang_centred,
#                         data = .x))
)
## Contrasting models performance
compare_performance(correct_shift_simple , peak_pupil_latency_simple, mean_pupil_simple, peak_pupil_simple,
mean_fixation_dur_simple , aoi_switches_simple, latency_to_switch_simple, prop_looking_diff_simple, number_fixations_simple, prop_looking_simple, target_stay_simple, correct_shift_simple)
models_nested_long <- models_nested %>%
pivot_longer(contains("split"), names_to = "model_name", values_to = "model_object") %>%
group_by(initial_look) %>%
nest()
#Target initial
compare_performance(models_nested_long$data[[1]]$model_object)
#Distractor initial
compare_performance(models_nested_long$data[[2]]$model_object)
#Neither initial
compare_performance(models_nested_long$data[[3]]$model_object)
#Model summaries
models_nested_long %>%
unnest() %>%
mutate(model_summary = map(model_object, ~summary(.x))) %>%
pull(model_summary)
View(models_nested)
#Distractor initial
compare_performance(models_nested_long$data[[2]]$model_object)
#Target initial
compare_performance(models_nested_long$data[[1]]$model_object)
?corrplot
custom_order<- c("Age in months", "Exposure to target language", "Proportion looking", "Proportion looking difference","Mean reaction time", "Total number of fixations","Peak pupil size difference",  "Mean pupil size difference", "Time to peak pupil", "Proportion of trials shifting to target", "Proportion of trials staying on target","Mean duration of looks", "Mean duration of first look", "Total number of AOI switches")
reordered_kbh_correlation<- kbh_correlation[custom_order, custom_order]
#Plot:
corrplot(reordered_kbh_correlation, type = 'lower', tl.col = 'black',
cl.ratio = 0.2, tl.srt = 45, col = COL2('PiYG', 10))
png(filename= here("archival_KBH_anonimyzed/corrleation.png"),width = 800, height = 800 )
#Plot:
corrplot(reordered_kbh_correlation, type = 'lower', tl.col = 'black',
cl.ratio = 0.2, tl.srt = 45, col = COL2('PiYG', 10))
png(filename= here("archival_KBH_anonimyzed/corrleation.png"),width = 800, height = 800 )
#Plot:
corrplot(reordered_kbh_correlation, type = 'lower', tl.col = 'black',
cl.ratio = 0.2, tl.srt = 45, col = COL2('PiYG', 10))
dev.off()
