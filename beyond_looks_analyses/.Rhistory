studio_project_name== "LearnMix-36"& media_name %in%
c("FR_Single_ChienWalem_R.wmv", "FR_Single_ChienTeelo_L.wmv", "FR_Single_ChienWalem_L.wmv","FR_Single_ChienTeelo_R.wmv")~ "chien",
studio_project_name== "LearnMix-36"& media_name %in%
c("FR_Single_LapinWalem_L.wmv", "FR_Single_LapinTeelo_R.wmv", "FR_Single_LapinTeelo_L.wmv","FR_Single_LapinWalem_R.wmv")~ "lapin",
studio_project_name== "LearnMix-36"& media_name %in%
c("EN_Single_DogWalem_R.wmv","EN_Single_DogTeelo_L.wmv", "EN_Single_DogWalem_L.wmv","EN_Single_DogTeelo_R.wmv")
~ "dog",
studio_project_name== "LearnMix-36"& media_name %in%
c("EN_Single_BunnyWalem_L.wmv", "EN_Single_BunnyTeelo_R.wmv", "EN_Single_BunnyTeelo_L.wmv", "EN_Single_BunnyWalem_R.wmv")
~ "bunny",
studio_project_name== "LearnMix-36"& media_name %in%
c("FR_Single_PoissonTeelo_L.wmv","FR_Single_PoissonWalem_R.wmv", "FR_Single_PoissonWalem_L.wmv","FR_Single_PoissonTeelo_R.wmv")
~ "poisson",
studio_project_name== "LearnMix-36"& media_name %in%
c("EN_Single_FishTeelo_L.wmv","EN_Single_FishWalem_R.wmv","EN_Single_FishWalem_L.wmv",
"EN_Single_FishTeelo_R.wmv")
~ "fish",
TRUE~"OTHER"
),
distractor_word = str_remove(yoked_pair, target_word),
distractor_word = str_remove(distractor_word, "-")
)
data_new_dvs <- kbh_w_items %>%
distinct(recording_name, media_name, age_months, exp_to_target_lang , target_word, yoked_pair) %>%
left_join(prop_looking %>% select(-subject_id, -samples_target, -samples_distractor)) %>%
#double check if kids see the same word more than once... if so, this item will be ducplicated in the dataset
left_join(prop_looking_diff) %>%
left_join(sampling_fixations_total %>% select(-subject_id)) %>%
left_join(fixations_total %>% select(-subject_id)) %>%
left_join(prop_shifts_distractor_initial) %>%
left_join(prop_shifts_target_initial) %>%
left_join(RT %>% ungroup() %>% select(recording_name, trial_number, latency_to_switch)) %>%
left_join(number_of_switches %>% select(-subject_id)) %>%
left_join(mean_fixation_dur) %>%
left_join(peak_dilation %>% select(-contains("max"))) %>%
left_join(mean_dilation %>% select(-mean_pupil_baseline, -mean_pupil_post_onset)) %>%
left_join(peak_pupil_latency) %>%
left_join(first_look_duration) %>%
ungroup()
###### First, create variables that will be useful for the calculations below ## TRY TO DO IT IN THE SAME DATA SET
initial_looks <- kbh_w_items %>%
filter(noun_onset >= 260 & noun_onset < 360) %>%
group_by(recording_name, trial_number, media_name) %>%
summarise(
distractor_count = sum(distractor),
target_count = sum(target),
trackloss_count = sum(trackloss)
)%>%
mutate(initial_look = case_when(target_count >0 ~ "target", #if the child *ever* looks to target during first 100 ms, then counted as initial target look
distractor_count/(distractor_count+trackloss_count) >=0.5 ~ "distractor",
TRUE ~ "neither"))
kbh_w_items <- left_join(kbh_w_items, initial_looks, by= c("recording_name", "trial_number", "media_name"))
#We are considering distractor initial trials as trials where in the first 100 ms ofr the analyses window the child looked at the distractor at least 50% of the time and never looked to target.
#Mix 20 S052 has 23 rows for trials other than trial 1 with no data—remove these here, try to figure out why this happened
kbh_w_items <- kbh_w_items %>%
filter(!(recording_name == "Mix_20_S52" & trial_number > 1))
#1. Proportion looking to target
prop_looking <- kbh_w_items %>%
filter(noun_onset>= 360 & noun_onset <= 3000)%>%
group_by(recording_name, subject_id, trial_number, media_name, age_months, exp_to_target_lang)%>%
summarise(samples_target=sum(target, na.rm = T),
samples_distractor=sum(distractor, na.rm = T))%>%
mutate(prop_looking= samples_target/(samples_target + samples_distractor)) %>%
ungroup()
#2. Proportion looking difference
#Now it is done but there is something strange happening with compmix items--to check.
#Within a pair of pictures A and B, the fixation to picture A relative to B when A was the target, minus the fixation #to A when A was the distractor.
#Question if two studies have the same item pair (e.g. dog-apple), should they still be grouped as the same yoked pair? They might have had different carrier sentences but, the words are the same.
#Question: should it be absolute difference or true difference?
prop_looking_diff <- kbh_w_items %>%
ungroup()%>%
filter(noun_onset>= 360 & noun_onset <= 3000)%>%
select(recording_name, recording_timestamp, target_word, distractor_word, target, distractor)%>%
pivot_longer(c(target_word, distractor_word), names_to = "word_type", values_to = "word") %>%
mutate(looking = case_when(word_type == "target_word" & target == TRUE ~ TRUE,
word_type == "distractor_word" & distractor == TRUE ~ TRUE,
TRUE ~ FALSE)) %>%
group_by(recording_name, word_type, word) %>%
#what percent of the time when x is target are kids looking at x, what percent of the time when x is distractor are kids looking at x
summarise(prop_looking = sum(looking == T)/n()) %>%
pivot_wider(names_from = "word_type", values_from = "prop_looking") %>%
filter(!is.na(target_word) & !is.na(distractor_word)) %>%
mutate(prop_looking_diff = target_word - distractor_word) %>%
select(recording_name, target_word = word, prop_looking_diff)
#3. Number of fixations
### Total number of fixations to the target during the window of analyses.
#### Question: What is considered a fixation? --> In TOBII we kept only valid fixations (as in Mills-Smith, 2016), they also excluded by subject and by trial (which we will do).
#we defined fixations as the number of consecutive runs within a trial where looks were in the target for at least 200ms while getting rid of short bouts of trackloss (17 to 38 ms)
# Group by subject and summarize consecutive TRUE values in target column - we are counting how many consecutive groups of 12 rows of TRUE target looks there are per trial, which is around 200 ms of looking. We are counting each group of 200 ms of looking as one fixation.
sampling_fixations_total <- kbh_w_items %>%
ungroup() %>%
filter(noun_onset >= 360 & noun_onset <= 3000) %>%
group_by(recording_name, trial_number) %>%
mutate(trackloss_group_id = data.table::rleid(trackloss)) %>%
group_by(trackloss_group_id, recording_name, trial_number) %>%
mutate(num_consec_trackloss_rows = n()) %>%
ungroup() %>%
filter(trackloss == FALSE | (trackloss == TRUE & num_consec_trackloss_rows >= 2)) %>%
group_by(recording_name, trial_number) %>%
mutate(looking_stretch_id = data.table::rleid(target)) %>%
group_by(recording_name, trial_number, looking_stretch_id) %>%
mutate(row = row_number(),
multi_of_twelve = case_when(row %% 12 == 0 & target == TRUE ~ "fixation")) %>%
group_by(recording_name, subject_id, trial_number, media_name) %>%
summarise(number_sampling_fixations = sum(multi_of_twelve == "fixation", na.rm = T)) %>%
ungroup()
#For this one, stretches of same looks are counted as one fixation
fixations_total <- kbh_w_items %>%
ungroup() %>%
filter(noun_onset >= 360 & noun_onset <= 3000) %>%
group_by(recording_name, trial_number) %>%
mutate(trackloss_group_id = data.table::rleid(trackloss)) %>%
group_by(trackloss_group_id, recording_name, trial_number) %>%
mutate(num_consec_trackloss_rows = n()) %>%
ungroup() %>%
filter(trackloss == FALSE | (trackloss == TRUE & num_consec_trackloss_rows >= 2)) %>%
group_by(recording_name, trial_number) %>%
mutate(looking_stretch_id = data.table::rleid(target)) %>%
group_by(recording_name, trial_number, looking_stretch_id) %>%
#filter to fixations of at least 12 rows or ~ 200 ms
filter(n() >= 12) %>%
#filter to target fixations
filter(target == TRUE) %>%
group_by(recording_name, subject_id, trial_number, media_name) %>%
summarise(number_fixations = length(unique(looking_stretch_id))) %>%
ungroup()
#4. Correct first shift to target
#On trials where infants were fixated on the distractor upon hearing the target word (i.e., distractor-initial trials), the number of first shifts to the target picture within the 300–1,800 ms window following target word onset, as a proportion of all distractor-initial trials.
first_shift_target <- kbh_w_items %>%
ungroup() %>%
filter(noun_onset >= 360 & noun_onset <= 1800) %>% #Keeping the shorter window to be consistent with Fernald
#Grouping and summarizing to get by subject by trial flagging of whether there was switching or not.
group_by(recording_name, subject_id, trial_number, media_name, initial_look) %>%
summarise(target = sum(target, na.rm = T),
distractor =  sum(distractor, na.rm = T)) %>% #Counting how many looks to target and distractor by timeslice grouped by target or distractor initial trials.
ungroup() %>%
mutate(correct_shift = case_when(initial_look == "target" & distractor ==0 ~ TRUE,
initial_look == "distractor" & target >0 ~ TRUE,
TRUE~FALSE)) #Making a column to calculate correct shifts. We defined correct shift as never looking to the distractor on target initial trial, or switching to the taget on distractor initial trials
prop_shifts_distractor_initial <- first_shift_target %>%
filter(initial_look == "distractor") %>%
group_by(recording_name) %>%
summarise(prop_shift_distractor_initial = sum(correct_shift == TRUE)/n())
prop_shifts_target_initial <- first_shift_target %>%
filter(initial_look == "target") %>%
group_by(recording_name) %>%
summarise(prop_shift_target_initial = sum(correct_shift == TRUE)/n())
#5. Reaction time
#do we want the latency from noun onset (0) or from window of analysis(360)? Right now using window of analysis
RT <- kbh_w_items %>%
ungroup() %>%
filter(noun_onset >= 360 & noun_onset <= 1800) %>% #Keeping the shorter window to be consistent with Fernald
#Grouping and summarizing to get by subject by trial flagging of whether there was switching or not.
filter(initial_look == "distractor") %>%
group_by(recording_name, subject_id, trial_number, media_name, initial_look, target) %>%
slice_head() %>%
filter(target == TRUE) %>%
mutate(latency_to_switch = noun_onset - 360)
#6. Total number of switches between AOIs
number_of_switches <- kbh_w_items %>%
ungroup() %>%
filter(noun_onset >= 360 & noun_onset <= 3000) %>%
#for this one, get rid of track loss rows
filter(trackloss == FALSE) %>%
group_by(recording_name, trial_number) %>%
mutate(looking_stretch_id = data.table::rleid(target)) %>%
group_by(recording_name, trial_number, looking_stretch_id) %>%
#keep stretches that are at least 200 ms or 12 rows
filter(n() >= 12) %>%
mutate(where_looking = case_when(target == TRUE ~ "target",
distractor == TRUE ~ "distractor",
TRUE ~ "neither")) %>%
filter(where_looking != "neither") %>%
distinct(recording_name, trial_number, looking_stretch_id, where_looking, media_name, subject_id) %>%
group_by(recording_name, trial_number) %>%
mutate(AOI_switches = case_when(lag(where_looking) == "target" & where_looking == "distractor" ~ 1,
lag(where_looking) == "distractor" & where_looking == "target" ~ 1)) %>%
group_by(recording_name, subject_id, trial_number, media_name) %>%
summarise(total_aoi_switches = sum(AOI_switches, na.rm = T)) %>%
ungroup()
#7. Mean latency of refixation during trial - COME BACK TO THIS ------- We decided to eliminate this one because our studies don't have a central image from which to refixate, and when we tried adding a narrow central strip, no one was looking there.
#Mean latency of correct saccadic shifts from the center to the peripheral target (refixations) during the trial.
#I would need to calculate the center point (shouldn't be too hard)
#
# kbh_data_center <- arch_final%>%
#   group_by(studio_project_name, studio_test_name, trial_number, recording_name)%>%
#   mutate(trial_from_zero = recording_timestamp-min(recording_timestamp))%>%
#   group_by(studio_project_name)%>%
#   mutate(noun_onset = case_when(studio_project_name=="CompMix-36"~trial_from_zero-3000, #Substracting noun onset to normalize
#                                 studio_project_name=="LearnMix-36"~trial_from_zero-4500,
#                                 studio_project_name=="Mix-20"~trial_from_zero-5400,
#                                 studio_project_name=="Mix-14"~trial_from_zero-5400,
#                                 studio_project_name=="CogMisp-24"~trial_from_zero-1500))%>%
#   ungroup()%>%
#   rename(target_side=target, distractor_side=distractor,
#          gaze_point_x= gaze_point_x_adc_spx,
#          gaze_point_y = gaze_point_y_adc_spx)%>%
#   mutate(trackloss = case_when(gaze_point_x<0 ~ TRUE,
#                                gaze_point_x> 1920 ~ TRUE,
#                                gaze_point_y<0 ~ TRUE,
#                                gaze_point_y > 1200 ~ TRUE,
#                                is.na(gaze_point_x) ~ TRUE,
#                                is.na(gaze_point_y) ~ TRUE,
#                                is.na(validity_left) ~ TRUE,
#                                is.na(validity_right) ~ TRUE,
#                                validity_left > 1 ~ TRUE,
#                                validity_right > 1 ~ TRUE,
#                                TRUE~ FALSE)) %>% #MAKE VISUALIZATIONS ABOUT TRACKLOSS FOR SANITY CHECK
#   mutate(target = case_when(gaze_point_x >= target_x_min&gaze_point_x <= target_x_max&gaze_point_y >= target_y_min&gaze_point_y <= target_y_max~TRUE,
#                             TRUE~FALSE)) %>%
#   mutate(distractor = case_when(gaze_point_x >= distractor_x_min&gaze_point_x <= distractor_x_max&gaze_point_y >= distractor_y_min&gaze_point_y <= distractor_y_max~TRUE,
#                                  TRUE ~ FALSE)) %>%
#   mutate(looks_to_center = case_when(gaze_point_x >= 950 & gaze_point_x <= 970 &gaze_point_y >= 0&gaze_point_y <= 1080 ~ TRUE,
#                                      TRUE~ FALSE)) %>% #creating a looks to center column
# mutate(where_looking = case_when(target == TRUE & looks_to_center == FALSE~ "target",
#                          target == TRUE & looks_to_center == TRUE~ "center",
#                          distractor == TRUE & looks_to_center == TRUE~ "center",
#                          distractor == TRUE & looks_to_center == FALSE~ "distractor",
#                          target == FALSE & distractor == FALSE & looks_to_center == TRUE ~ "center",
#                          TRUE ~ "neither"))
#
#
# mean_latency_refixation <- kbh_data_center %>%
#   filter(noun_onset >= 360 & noun_onset <= 3000) %>%
#   group_by(recording_name, trial_number) %>%
#   select(looks, media_name, studio_project_name, studio_test_name, trial_number, recording_name, recording_timestamp, where_looking) %>%
#   mutate(looking_area_id = data.table::rleid(where_looking)) %>%
#   group_by(recording_name, trial_number, looking_area_id) %>%
#   mutate(how_long_looking_area = n(),
#          length_center_look = case_when(where_looking == "center" ~ how_long_looking_area))
#
#   filter(looks %in% c("target", "center")) %>% #filtering out disctractor looks because I am only interest in latency to look to taget
# group_by(recording_name, media_name) %>%
#   filter("target" %in% looks & "center" %in% looks) %>% #keeping only trials where there were looks to target and to center
#   arrange()%>%
#  filter(!(looks == "target" & lag(looks) == "target")) %>% #getting rid of consecutive target looks because I am not interested in duration of looks to target I am interested in duration of looks to center before the switch.
#  ungroup() %>%
#   mutate(consecutive_looks_center= looks == "center" & lag(looks) == "center") %>%
#     group_by(recording_name, media_name, consecutive_looks_center, looks) %>%
#   reframe(total_time = sum(recording_timestamp)) %>%
#       ungroup()
#
# mean_latency_refixation2 <- mean_latency_refixation %>%
# group_by(recording_name, media_name) %>%
#    filter(looks == "center" & lead(looks) == "target") # not working
#
#   summarise(time_to_refixate = diff(total_time))
#8. Mean fixation duration during trial
#Mean duration of fixations during the window of analysis within a trial. Mean by subject by trial?
mean_fixation_dur <- kbh_w_items %>%
filter(noun_onset>= 360 & noun_onset <= 3000)%>%
group_by(recording_name, trial_number) %>%
mutate(trackloss_group_id = data.table::rleid(trackloss)) %>%
group_by(trackloss_group_id, recording_name, trial_number) %>%
mutate(num_consec_trackloss_rows = n()) %>%
ungroup() %>%
filter(trackloss == FALSE | (trackloss == TRUE & num_consec_trackloss_rows >= 2)) %>%
group_by(recording_name, trial_number) %>%
mutate(looking_stretch_id = data.table::rleid(target)) %>%
group_by(recording_name, trial_number, looking_stretch_id) %>%
#filter to fixations of at least 12 rows or ~ 200 ms
filter(n() >= 12) %>%
filter(target == TRUE) %>%
group_by(recording_name, trial_number, media_name, looking_stretch_id) %>%
summarise(length_of_looks = n()) %>%
mutate(length_of_looks = length_of_looks*(1000/60)) %>%
group_by(recording_name, trial_number, media_name) %>%
summarise(duration_of_look = mean(length_of_looks, na.rm = T)) %>%
ungroup()
#When you have time make some of the calculations by hand to make sure the duration is correct.
#I guess here is by subject the mean duration. But check on the paper.
#9. Proportion of fixation duration (better named target divergence time)
#The target divergence time measure is defined as the time at which fixations to the “target” object diverges from fixations to the “distractor”. point-by-point t-tests at each 10 ms bin between mean looking proportions to the target object and mean looking proportions to the distractor object were calculated. the time point reported is the earliest time point that a minimum of five consecutive two tailed t-tests with an alpha level of p < .05 indicate a significant difference between the fixation to the target compared to distractor
#What we need to do in our research: By participant, collapsing across trials average prop looking to target and average proportion looking to distractor eavery 17ms (or whatever or bin size is). So at that stage the participant has 2 columns with 8 rows (1 row per trial), one column for the average prop looks to target, one for the average prop looks to distractor. THEN we do a t test between column A and B, so we get column C that again has 8 rows (this is a rowwise t test, bonferroni corrected I guess). Then we summarize to get a single number per participant. that number is the ms slice at which 5 (?) t-tests are p>0.05.
#Get average looking to target and looking to distractor for each 220-ms time bin (the reference paper used 10-ms time bins, but their eyetracker sampled every 2ms and ours only did ever 16-17 ms)
divergence_point <- kbh_w_items %>%
filter(noun_onset>= -2000 & noun_onset <= 3000)%>%
#make timestamp that is offset by the time it takes to initiate a look, related to the noun onset
mutate(timestamp_zero_interest_period = noun_onset - 360) %>%
ungroup()%>%
group_by(recording_name, trial_number, media_name, age_months) %>%
#Need to align timestamps for each trial, so make the one closest to 0 equal zero and then add the eyetracker frame rate for each row
mutate(new_noun_onset = case_when(abs(noun_onset) == min(abs(noun_onset)) ~ 0)) %>%
select(recording_name, trial_number, recording_timestamp, trial_from_zero, noun_onset, new_noun_onset, target, distractor, trackloss, age_months) %>%
mutate(parallel_timestamp = (row_number() - which(new_noun_onset == 0))*(1000/60),
parallel_timestamp = round(parallel_timestamp)) %>%
select(media_name, recording_name, trial_number, parallel_timestamp, target, distractor, trackloss, age_months) %>%
pivot_longer(c(target, distractor), names_to = "aoi", values_to = "value") %>%
arrange(recording_name, trial_number, aoi, parallel_timestamp) %>%
mutate(value = as.numeric(value)) %>%
filter(trackloss == FALSE) %>%
ungroup() %>%
mutate(age_group = case_when(age_months >= 14 & age_months < 21 ~ "14-20",
age_months >= 21 & age_months < 31 ~ "21-30",
age_months >= 31 & age_months < 51 ~ "31-48"))
divergence_plot_data <- divergence_point %>%
group_by(recording_name, aoi, parallel_timestamp, age_group) %>%
summarise(mean_fixation = mean(value))
#This takes a little while to run because of the bootstrapping
divergence_plot <- ggplot(divergence_plot_data, aes(x=parallel_timestamp, y=mean_fixation, colour=aoi)) +
geom_vline(xintercept=0, linetype="dashed", colour="gray28") +
stat_summary(fun.data=mean_cl_boot, aes(fill=aoi),
geom="ribbon", alpha=.2, linetype="blank") +
stat_summary(fun=mean, geom="path",
aes(group=aoi, linetype=aoi), size=.7) + facet_wrap(~age_group)
divergence_point_stat <- divergence_point %>%
#reduce the time span for calculating stats since the bootstrapping takes a while.
filter(parallel_timestamp >= -500 & parallel_timestamp <= 2500)
#Apply statistical test to each time point
divergence_p_table <- divergence_point_stat %>%
# select only rows in the dataframe where a fixation occurred
filter(value == 1) %>%
# label fixations that were on the target as 1 and as 0 otherwise,
mutate(looking_to_target = ifelse(aoi == "target", 1, 0)) %>%
# we want to test for each timepoint at each age group
group_by(parallel_timestamp, age_group) %>%
# apply logistic regression and extract z-values
summarise(z = summary(lme4::glmer(looking_to_target ~ 1 +
(1|recording_name), family="binomial",
control=lme4::glmerControl(calc.derivs=FALSE)))$coefficients[1,3]) %>%
# add p-values
mutate(p = pnorm(-abs(z))*2)
# Set alpha level and calculate Bonferroni correction
alpha           <- 0.05
N_tests         <- length(unique(divergence_point_stat$parallel_timestamp))
alpha_corrected <- alpha/N_tests
# Find the earliest timepoint with a significant uncorrected p-value
(uncorr <- divergence_p_table %>%
group_by(age_group) %>%
# extract positive z-scores ("target advantage") and significant p-values
filter(z > 0, p < alpha) %>%
# extract the earliest significant p-value and its timepoint
slice(1))
# Find the earliest timepoint that survives the Bonferroni correction
(bnf <- divergence_p_table %>%
group_by(age_group) %>%
filter(z > 0, p < alpha_corrected) %>%
slice(1))
# Find the earliest timepoint after FDR control
(fdr <- divergence_p_table %>%
group_by(age_group) %>%
# apply FDR control from `stats` package
mutate(p_fdr = stats::p.adjust(p, method = "BY", n = length(p))) %>%
filter(z > 0, p_fdr < alpha) %>%
slice(1))
plot_points <- tibble(correction = c(rep("Uncorrected", 3), rep("Bonferroni", 3), rep("FDR", 3)),
age_group = rep(c("14-20", "21-30", "31-48"),3),
parallel_timestamp = c(uncorr$parallel_timestamp, bnf$parallel_timestamp, fdr$parallel_timestamp),
mean_fixation = .5,
aoi = "target")
overall_divergence_plot <- ggplot(divergence_plot_data, aes(x=parallel_timestamp, y=mean_fixation, colour=aoi)) +
geom_vline(xintercept=0, linetype="dashed", colour="gray28") +
stat_summary(fun.data=mean_cl_boot, aes(fill=aoi),
geom="ribbon", alpha=.2, linetype="blank") +
stat_summary(fun=mean, geom="path",
aes(group=aoi, linetype=aoi), size=.7) +
facet_wrap(~age_group) +
geom_point(data = plot_points, color = "black", aes(shape = plot_points$correction))
#Apply statistical test to each time point for each kid
divergence_p_table_by_subject <- divergence_point_stat %>%
# select only rows in the dataframe where a fixation occurred
filter(value == 1) %>%
# label fixations that were on the target as 1 and as 0 otherwise,
mutate(looking_to_target = ifelse(aoi == "target", 1, 0)) %>%
# we want to test for each timepoint for each subject
group_by(parallel_timestamp, recording_name) %>%
# apply logistic regression and extract z-values
summarise(z = summary(glm(looking_to_target ~ 1, family="binomial"))$coefficients[1,3]) %>%
# add p-values
mutate(p = pnorm(-abs(z))*2)
# Find the earliest timepoint with a significant uncorrected p-value
(uncorr_by_subject <- divergence_p_table_by_subject %>%
group_by(recording_name) %>%
# extract positive z-scores ("target advantage") and significant p-values
filter(z > 0, p < alpha) %>%
# extract the earliest significant p-value and its timepoint
slice(1))
# Find the earliest timepoint that survives the Bonferroni correction ----------- Looks like when you split by subject, there isn't enough data for the corrected p values to be significant, so statistically, individual children don't have a divergence point after correcting
(bnf_by_subject <- divergence_p_table_by_subject %>%
group_by(recording_name) %>%
filter(z > 0, p < alpha_corrected) %>%
slice(1))
# Find the earliest timepoint after FDR control
(fdr_by_subject <- divergence_p_table_by_subject %>%
group_by(recording_name) %>%
# apply FDR control from `stats` package
mutate(p_fdr = stats::p.adjust(p, method = "BY", n = length(p))) %>%
filter(z > 0, p_fdr < alpha) %>%
slice(1))
#10. Pupil dilation
#Baseline pupil size in the 200ms before noun onset and then subtracted the baseline from the pupil size measurements on each trial.
#In Liz's paper they contrasted time slice by time slice across two conditions, but here we don't have switched and same language conditions. I'll do average size at baseline and avg size after noun onset for now. But then talk with team about it.
pupil_dilation <- kbh_w_items %>%
ungroup() %>%
filter(noun_onset>= -200 & noun_onset <= 500)%>%
mutate(pupil_period = case_when(noun_onset >= -200 & noun_onset <= 0 ~ "baseline",
TRUE ~ "post_onset"))%>%
select(recording_timestamp, subject_id, recording_name, trial_number, media_name, pupil_period, pupil_right, pupil_left) %>%
mutate(two_pupil_mean = case_when(is.na(pupil_left) & is.na(pupil_right) ~ NA,
is.na(pupil_left)  ~ pupil_right,
is.na(pupil_right) ~ pupil_left,
TRUE ~ (pupil_left + pupil_right)/2)) %>%
filter(!is.na(two_pupil_mean))
#The next steps are confusing to me.Should we average baseline pupil? Should we contrast each post onset time slice to a partricular baseline time slice? We could use mean dilation, peak dilation (or peak amplitude), and/or peak latency (i.e., the time between onset and peak pupil dilation). The problem with mean dilation is that the baseline has less sampling than the post-onset. Could we do peak dilation of baseline vs. peak dilation post onset? Or peak dilation but from which baseline point? from peak? We will for sure do GCA's as extra analyses
#Peak dilation
peak_dilation <- pupil_dilation %>%
ungroup()%>%
group_by(recording_name, trial_number, media_name, pupil_period) %>%
summarise(peak_pupil = max(two_pupil_mean)) %>%
pivot_wider(names_from = pupil_period, values_from ="peak_pupil")%>%
mutate(peak_pupil_size_difference = post_onset - baseline) %>% #difference in peak pupil points
filter(!is.na(peak_pupil_size_difference)) %>%
rename(max_pupil_baseline = baseline,
max_pupil_post_onset = post_onset)
#Mean dilation
mean_dilation <- pupil_dilation %>%
ungroup()%>%
group_by(recording_name, trial_number, media_name, pupil_period) %>%
summarise(mean_pupil = mean(two_pupil_mean, na.rm = T)) %>%
pivot_wider(names_from = pupil_period, values_from ="mean_pupil")%>%
mutate(mean_pupil_size_difference = post_onset - baseline) %>% #difference in peak pupil points
filter(!is.na(mean_pupil_size_difference)) %>%
rename(mean_pupil_baseline = baseline,
mean_pupil_post_onset = post_onset)
#peak latency
peak_pupil_latency <- pupil_dilation %>%
ungroup()%>%
group_by(recording_name, media_name, pupil_period, trial_number) %>%
slice(which.max(two_pupil_mean)) %>%
select(recording_name, media_name, pupil_period, peak_time_stamp = recording_timestamp) %>%
group_by(recording_name, trial_number, media_name) %>%
summarise(peak_pupil_latency = diff(peak_time_stamp))
#11. Duration of first look
### Duration of the first look recorded toward a particular AOI. - To target specifically, with at least 200 ms fixation length
first_look_duration <- kbh_w_items %>%
ungroup() %>%
filter(noun_onset >= 360 & noun_onset <= 3000) %>%
group_by(recording_name, trial_number) %>%
mutate(looking_stretch_id = data.table::rleid(target)) %>%
group_by(recording_name, trial_number, looking_stretch_id) %>%
mutate(row = row_number()) %>%
mutate(where_looking = case_when(target == TRUE ~ "target",
distractor == TRUE ~ "distractor",
TRUE ~ "neither")) %>%
filter(where_looking == "target") %>%
mutate(first_look_dur = max(row_number())*(1000/60)) %>%
filter(first_look_dur >= 200) %>%
group_by(recording_name, trial_number) %>%
filter(looking_stretch_id == min(looking_stretch_id)) %>%
ungroup() %>%
distinct(recording_name, trial_number, media_name, first_look_dur)
data_new_dvs <- kbh_w_items %>%
distinct(recording_name, media_name, age_months, exp_to_target_lang , target_word, yoked_pair) %>%
left_join(prop_looking %>% select(-subject_id, -samples_target, -samples_distractor)) %>%
#double check if kids see the same word more than once... if so, this item will be ducplicated in the dataset
left_join(prop_looking_diff) %>%
left_join(sampling_fixations_total %>% select(-subject_id)) %>%
left_join(fixations_total %>% select(-subject_id)) %>%
left_join(prop_shifts_distractor_initial) %>%
left_join(prop_shifts_target_initial) %>%
left_join(RT %>% ungroup() %>% select(recording_name, trial_number, latency_to_switch)) %>%
left_join(number_of_switches %>% select(-subject_id)) %>%
left_join(mean_fixation_dur) %>%
left_join(peak_dilation %>% select(-contains("max"))) %>%
left_join(mean_dilation %>% select(-mean_pupil_baseline, -mean_pupil_post_onset)) %>%
left_join(peak_pupil_latency) %>%
left_join(first_look_duration) %>%
ungroup()
#PEARSON CORRELATION
for_correlation<- data_new_dvs %>%
select(where(is.numeric)) %>%
select(-trial_number)
kbh_correlation<- rcorr(as.matrix(for_correlation))
# Extract p-values
p_values <- kbh_correlation$P
# Flatten the matrix to adjust p-values
p_values_flat <- as.vector(p_values)
# Adjust p-values using Bonferroni correction
p_values_adj <- p.adjust(p_values_flat, method = "bonferroni")
# Convert the adjusted p-values back to a matrix
p_values_adj_matrix <- matrix(p_values_adj, ncol = ncol(kbh_correlation))%>%
print()
# Convert the adjusted p-values back to a matrix
p_values_adj_matrix <- matrix(p_values_adj, ncol = ncol(for_correlationn))%>%
print()
# Convert the adjusted p-values back to a matrix
p_values_adj_matrix <- matrix(p_values_adj, ncol = ncol(for_correlation))%>%
print()
#plotting the correlation
corrplot(kbh_correlation)
corrplot(p_values_adj_matrix)
test<- as.data.frame(p_values_adj_matrix)
View(prop_looking_diff)
View(test)
kbh_correlation <- cor(x=for_correlation, use="complete.obs")
?corrplot
#plotting the correlation
corrplot(kbh_correlation, method='square', diag=T)
#plotting the correlation
corrplot(kbh_correlation, method='square', diag=TRUE)
#plotting the correlation
corrplot(kbh_correlation, method='shade')
#plotting the correlation
corrplot(kbh_correlation, method='number')
#plotting the correlation
corrplot(kbh_correlation, method='pie')
#plotting the correlation
corrplot(kbh_correlation, method='square')
#plotting the correlation
corrplot(kbh_correlation, method='square', p.mat=T)
#plotting the correlation
corrplot(kbh_correlation, method='square')
